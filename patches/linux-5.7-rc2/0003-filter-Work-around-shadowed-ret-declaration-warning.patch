From: Sven Eckelmann <sven@narfation.org>
Date: Tue, 21 Apr 2020 10:14:19 +0200
Subject: filter: Work around shadowed ret declaration warning

    ./include/linux/filter.h:599:15: warning: symbol 'ret' shadows an earlier one
    ./include/linux/filter.h:596:13: originally declared here

diff --git a/include/linux/filter.h b/include/linux/filter.h
index 9b5aa5c483ccb59be7ea7be2fe856b2995c64344..7797910e99ff975be20d7ffe4cfe680c5d61821f 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -560,21 +560,21 @@ struct sk_filter {
 DECLARE_STATIC_KEY_FALSE(bpf_stats_enabled_key);
 
 #define __BPF_PROG_RUN(prog, ctx, dfunc)	({			\
-	u32 ret;							\
+	u32 __ret;							\
 	cant_migrate();							\
 	if (static_branch_unlikely(&bpf_stats_enabled_key)) {		\
 		struct bpf_prog_stats *stats;				\
 		u64 start = sched_clock();				\
-		ret = dfunc(ctx, (prog)->insnsi, (prog)->bpf_func);	\
+		__ret = dfunc(ctx, (prog)->insnsi, (prog)->bpf_func);	\
 		stats = this_cpu_ptr(prog->aux->stats);			\
 		u64_stats_update_begin(&stats->syncp);			\
 		stats->cnt++;						\
 		stats->nsecs += sched_clock() - start;			\
 		u64_stats_update_end(&stats->syncp);			\
 	} else {							\
-		ret = dfunc(ctx, (prog)->insnsi, (prog)->bpf_func);	\
+		__ret = dfunc(ctx, (prog)->insnsi, (prog)->bpf_func);	\
 	}								\
-	ret; })
+	__ret; })
 
 #define BPF_PROG_RUN(prog, ctx)						\
 	__BPF_PROG_RUN(prog, ctx, bpf_dispatcher_nop_func)
