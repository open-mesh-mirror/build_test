From 00f39978a69b3fc8b51b3aa9cc5661e73e893df1 Mon Sep 17 00:00:00 2001
From: Sven Eckelmann <sven@narfation.org>
Date: Tue, 21 Apr 2015 19:31:46 +0200
Subject: [PATCH] smatch: Workaround to allow the check of
 batadv_iv_ogm_process_per_outif

---
 smatch_implied.c | 4 ++--
 smatch_slist.c   | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/smatch_implied.c b/smatch_implied.c
index 3e6afad..728b75c 100644
--- a/smatch_implied.c
+++ b/smatch_implied.c
@@ -226,7 +226,7 @@ static void separate_pools(struct sm_state *sm_state, int comparison, struct ran
 	   so we bail.  Theoretically, bailing out here can cause more false
 	   positives but won't hide actual bugs.
 	*/
-	if (sm_state->nr_children > 4000) {
+	if (sm_state->nr_children > 40000) {
 		static char buf[1028];
 		snprintf(buf, sizeof(buf), "debug: separate_pools: nr_children over 4000 (%d). (%s %s)",
 			 sm_state->nr_children, sm_state->name, show_state(sm_state->state));
@@ -263,7 +263,7 @@ struct sm_state *filter_pools(struct sm_state *sm,
 	if (!sm)
 		return NULL;
 
-	if (sm->nr_children > 4000) {
+	if (sm->nr_children > 40000) {
 		static char buf[1028];
 		snprintf(buf, sizeof(buf), "debug: %s: nr_children over 4000 (%d). (%s %s)",
 			 __func__, sm->nr_children, sm->name, show_state(sm->state));
diff --git a/smatch_slist.c b/smatch_slist.c
index 55becc9..d2d8946 100644
--- a/smatch_slist.c
+++ b/smatch_slist.c
@@ -237,14 +237,14 @@ int out_of_memory(void)
 	 * It works out OK for the kernel and so it should work
 	 * for most other projects as well.
 	 */
-	if (sm_state_counter * sizeof(struct sm_state) >= 50000000)
+	if (sm_state_counter * sizeof(struct sm_state) >= 500000000)
 		return 1;
 	return 0;
 }
 
 int low_on_memory(void)
 {
-	if (sm_state_counter * sizeof(struct sm_state) >= 25000000)
+	if (sm_state_counter * sizeof(struct sm_state) >= 250000000)
 		return 1;
 	return 0;
 }
-- 
2.1.4

