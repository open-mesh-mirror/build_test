From: Simon Wunderlich <sw@simonwunderlich.de>
Date: Wed, 19 Mar 2014 11:45:17 +0100
Subject: wait.h: fix wait_event_interruptible() nested warnings

Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>

diff --git a/include/linux/wait.h b/include/linux/wait.h
index e022ee95bd45c4f5a37056fccccfc6277361ad24..90bd9e8c7a09ff2af1074b84e56d44cc953aab1c 100644
--- a/include/linux/wait.h
+++ b/include/linux/wait.h
@@ -269,6 +269,13 @@ static inline void wake_up_pollfree(wait_queue_head_t *wq_head)
 		__ret = 1;						\
 	__cond || !__ret;						\
 })
+#define ___wait_cond_timeout2(condition)					\
+({									\
+	bool __cond = (condition);					\
+	if (__cond && !__ret2)						\
+		__ret2 = 1;						\
+	__cond || !__ret2;						\
+})
 
 #define ___wait_is_interruptible(state)					\
 	(!__builtin_constant_p(state) ||				\
@@ -486,17 +493,17 @@ do {									\
  */
 #define wait_event_interruptible(wq, condition)				\
 ({									\
-	int __ret = 0;							\
+	int __ret2 = 0;							\
 	might_sleep();							\
 	if (!(condition))						\
-		__ret = __wait_event_interruptible(wq, condition);	\
-	__ret;								\
+		__ret2 = __wait_event_interruptible(wq, condition);	\
+	__ret2;								\
 })
 
 #define __wait_event_interruptible_timeout(wq, condition, timeout)	\
-	___wait_event(wq, ___wait_cond_timeout(condition),		\
+	___wait_event(wq, ___wait_cond_timeout2(condition),		\
 		      TASK_INTERRUPTIBLE, 0, timeout,			\
-		      __ret = schedule_timeout(__ret))
+		      schedule_timeout(__ret))
 
 /**
  * wait_event_interruptible_timeout - sleep until a condition gets true or a timeout elapses
@@ -520,12 +527,12 @@ do {									\
  */
 #define wait_event_interruptible_timeout(wq, condition, timeout)	\
 ({									\
-	long __ret = timeout;						\
+	long __ret2 = timeout;						\
 	might_sleep();							\
-	if (!___wait_cond_timeout(condition))				\
-		__ret = __wait_event_interruptible_timeout(wq,		\
+	if (!___wait_cond_timeout2(condition))				\
+		__ret2 = __wait_event_interruptible_timeout(wq,		\
 						condition, timeout);	\
-	__ret;								\
+	__ret2;								\
 })
 
 #define __wait_event_hrtimeout(wq, condition, timeout, state)		\
