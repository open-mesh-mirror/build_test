From: Sven Eckelmann <sven@narfation.org>
Date: Sat, 3 Aug 2024 09:51:40 +0200
Subject: Revert "minmax: relax check to allow comparison between unsigned arguments and signed constants"

This reverts commit 22f7794ef5a36f393087510dfc91238ddb635a21.

diff --git a/include/linux/minmax.h b/include/linux/minmax.h
index dd52969698f7418d8880989da2fb9dd853c1f12b..f76b7145fc11579f17b358921a36dfe31e8fbf3d 100644
--- a/include/linux/minmax.h
+++ b/include/linux/minmax.h
@@ -9,18 +9,13 @@
 /*
  * min()/max()/clamp() macros must accomplish three things:
  *
- * - Avoid multiple evaluations of the arguments (so side-effects like
+ * - avoid multiple evaluations of the arguments (so side-effects like
  *   "x++" happen only once) when non-constant.
- * - Retain result as a constant expressions when called with only
+ * - perform signed v unsigned type-checking (to generate compile
+ *   errors instead of nasty runtime surprises).
+ * - retain result as a constant expressions when called with only
  *   constant expressions (to avoid tripping VLA warnings in stack
  *   allocation usage).
- * - Perform signed v unsigned type-checking (to generate compile
- *   errors instead of nasty runtime surprises).
- * - Unsigned char/short are always promoted to signed int and can be
- *   compared against signed or unsigned arguments.
- * - Unsigned arguments can be compared against non-negative signed constants.
- * - Comparison of a signed argument against an unsigned constant fails
- *   even if the constant is below __INT_MAX__ and could be cast to int.
  */
 #define __typecheck(x, y) \
 	(!!(sizeof((typeof(x) *)1 == (typeof(y) *)1)))
@@ -30,14 +25,9 @@
 	__builtin_choose_expr(__is_constexpr(is_signed_type(typeof(x))),	\
 		is_signed_type(typeof(x)), 0)
 
-/* True for a non-negative signed int constant */
-#define __is_noneg_int(x)	\
-	(__builtin_choose_expr(__is_constexpr(x) && __is_signed(x), x, -1) >= 0)
-
-#define __types_ok(x, y) 					\
-	(__is_signed(x) == __is_signed(y) ||			\
-		__is_signed((x) + 0) == __is_signed((y) + 0) ||	\
-		__is_noneg_int(x) || __is_noneg_int(y))
+#define __types_ok(x, y) 			\
+	(__is_signed(x) == __is_signed(y) ||	\
+		__is_signed((x) + 0) == __is_signed((y) + 0))
 
 #define __cmp_op_min <
 #define __cmp_op_max >
